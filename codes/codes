//4位全加器
module adder4(cout,sum,ina,inb,cin);
	output [3:0]sum;
	output cout;
	input cout;
	input cin;
	assign {cout,sum}=ina+inb+cin;
endmodule

//4位计数器
module count4(out,reset,clk);
	output [3:0]out;
	input reset,clk;
	reg [3:0] out;
	always@(posedge clk)
	begin
		if(reset)	//同步复位
			out<=0;
		else
			out<=out+1;//计数
	end 
endmodule

//与或非 门电路
module AOI(A,B,C,D,F);	//模块名位AOI(端口列表A,B,C,D,F)
	input A,B,C,D;
	output F;
	wire A,B,C,D,F;
	assign F=~((A&B)|(C&D));
endmodule

//4选1数据选择器
module mux4_1(out,in0,in1,in2,in3.sel);
	output out;
	input in0,in1,in2,in3;
	input [1:0] sel;
	reg out;
	always@(in0 or in1 or in3 or in2 or sel)
		case(sel)
		2'b00:out=in0;
		2'b01:out=in1;
		2'b10:out=in2;
		2'b11:out=in3;
		default:out=2'bx;
		endcase
endmodule

//同步置数、同步清零计数器
module cout(out,data,load,reset,clk);
	output [7:0] out;
	input [7:0] data;
	input load,clk,reset;
	reg [7:0] out;
	always@(posedge clk)
	begin
		if(!reset)	//低电平有效
			out<=8'h00;//同步清零
		else if(load)
			out<=data;
		else 
			out<=out+1;
	end 
endmodule

//用always过程语句描述简单的算术逻辑单元
`define add 3'd0
`define minus 3'd1
`define band 3'd2
`define bor 3'd3
`define bnot 3'd4
module alu(out,opcode,a,b);
	output [7:0] out;
	reg [7:0] out;
	input [2:0] opcode;//操作码
	input [7:0] a,b;
	always@(opcode or a or b)//电平敏感的always块
	begin
		case(opcode)
		`add:out<=a+b;//加操作
		`minus:out<=a-b;//减操作
		`band:out<=a&b;//与操作
		`bor:out<=a|b;//或操作
		`bnot:out<=~a;//反操作
		default:out<=8'hx;//未收到指令时，输出任意态
		endcase
	end
endmodule

//持续赋值方式定义的mux2_1
module mux21_1(out,a,b,sel);
	input a,b,sel;
	output out;
	assign out=(sel==0)?a:b;//持续赋值 
endmodule

//阻塞赋值方式定义的mux2_1
module mux21_2(out,a,b,sel);
	input a,b,sel;
	output out;
	always@(a or b or sel)
	begin
		if(sel==0)
			out=a;//阻塞赋值,前一条语句没有完成赋值过程之前,后面的语句不能被执行
		else
			out=b;
	end
endmodule

//阻塞赋值方式定义的mux2_1
module mux21_2(out,a,b,sel);
	input a,b,sel;
	output out;
	always@(a or b or sel)
	begin
		if(sel==0)
			out<=a;//一条非阻塞赋值语句的执行，不会影响块中其他语句的执行
		else
			out<=b;
	end
endmodule

//模为60的BCD码加法器
module count60(qout,cout,data,load,reset,clk);
	output [7:0] qout;
	output cout;
	input [7:0]data;
	input load,cin,clk,reset;
	reg [7:0] qout;
	always@(posedge clk)
	begin
		if(reset)
			qout<=0;//同步复位 
		else if(load)
			qout<=data;//同步置数 
		else if(cin)
		begin
			if(qout[3:0]==9)	//低位是否为9
			begin 
				qout[3:0]<=0;//低位为9就回0
				if(qout[7:4]==5)//判断高位是不是5
					qout[7:4]<=0;//高位是5就回0
				else 
					qout[7:4]<=qout[7:4]+1;//高位不为5则加1
			end 
			else 	//低位不为9则+1
				qout[3:0]<=qout[3:0]+1;
		end
	end 
	assign cout=((qout==8'h59)&cin)?1:0;//产生进位输出信号
endmodule

//BCD码-七段数码管显示译码器
module decode4_7(decodeout,indec); 
	output[6:0] decodeout; 
	input[3:0] indec; 
	reg[6:0] decodeout; 
	always @(indec)   
	begin     
		case(indec)             //用case语句进行译码      
		4'd0:decodeout=7'b1111110;      
		4'd1:decodeout=7'b0110000;      
		4'd2:decodeout=7'b1101101;      
		4'd3:decodeout=7'b1111001;      
		4'd4:decodeout=7'b0110011;      
		4'd5:decodeout=7'b1011011;      
		4'd6:decodeout=7'b1011111;      
		4'd7:decodeout=7'b1110000;      
		4'd8:decodeout=7'b1111111;       
		4'd9:decodeout=7'b1111011;      
		default: decodeout=7'bx;     
		endcase   
	end
endmodule


//用casez描述的数据选择器
module mux_casez(out,a,b,c,d,select);
	output out;
	input a,b,c,d;
	input [3:0] select;
	reg out;
	always@(select or a or b or c or d)
	begin 
		casez(select)
		4'b???1:out=a;
		4'b??1?:out=b;
		4'b?1??:out=c;
		4'b1???:out=d;
		endcase
	end
endmodule

//隐含锁存器
module buried_ff(c,b,a);
	output c;
	input b,a;
	reg c;
	always@(a or b)
	begin
		if((b==1)&&(a==1))
			c=a&b;
	end
endmodule

//用for语句描述的七人投票表决器
module voter7(pass,vote);
	output pass;
	input [6:0]vote;
	reg [2:0] sum;
	integer i;
	reg pass;
	always@(vote)
	begin
		sum=0;
		for(i=0;i<=6;i=i+1)//for语句
			if(vote[i])
				sum=sum+1;
		if(sum[2])	//若超过4人赞成,pass
			pass=1;
		else
			pass=0;
	end
endmodule

//用for语句实现两个8位数相乘
module muti_for(outcome,a,b);
	parameter size=8;
	input [size:1] a,b;
	output reg [2*size:1] outcome;//结果
	integer i;
	always@(a or b)
	begin
		outcome=0;
		for(i=1;i<=size;i=i+1)
			if(b[i])
				outcome=outcome+(a<<(i-1));
	end
endmodule

//用repeat实现8位二进制数的乘法
module muti_repeat(outcome,a,b);
	parameter size=8;
	input [size:1] a,b;
	output reg [2*size:1] outcome;
	reg [2*size:1] temp_a;
	reg [size:1] temp_b;
	always@(a or b)
	begin 
		outcome=0;
		temp_a=a;
		temp_b=b;
		repeat(size)	//repeat语句,size为循环次数
		begin
			if(temp_b[1])//如果temp_b的最低位为1，就执行下面的加法
				outcome=outcome+temp_a;
			temp_a=temp_a<<1;//a左移一位
			temp_b=temp_b>>1;//操作数b右移一位
		end
	end	
endmodule

//6位BCD码加法器
module counter6bit_test(ENA,CLR,F_IN,Q);
    input ENA;
    input CLR;
    input F_IN;
    output [23:0] Q;  
    

    reg [23:0] Q;
    reg F_OUT;
    
/*请在下面添加代码，完成6位十进制计数器*/
		/* Begin */
	always@(F_IN)
		if(CLR)
			Q<=0;
		else if(ENA)begin
				if(Q[3:0]<9)
					Q[3:0]<=Q[3:0]+1;
				else begin
					Q[3:0]<=0;
					if(Q[7:4]<9)
						Q[7:4]<=Q[7:4]+1;
					else begin
						Q[7:4]<=0;
						if(Q[11:8]<9)
							Q[11:8]<=Q[11:8]+1;
						else begin
							Q[11:8]<=0;
							if(Q[15:12]<9)
								Q[15:12]<=Q[15:12]+1;
							else begin
								Q[15:12]<=0;
								if(Q[19:16]<9)
									Q[19:16]<=Q[19:16]+1;
								else begin
									Q[19:16]<=0;
									if(Q[23:20]<9)
										Q[23:20]<=Q[23:20]+1;
									else 
										Q[23:20]=0;
								end
							end 
						end 
					end 
				end 
			end
		else  
			Q<=Q;


		/* End */

  end
endmodule

//24位锁存器
module latch24_test( d, clk,q );
	// 请在下面添加代码，完成24位锁存器
	/* Begin */

	input [23:0] d;
	input clk;
	output reg [23:0] q;
	always@(d or clk)
		if(clk)
			q<=d;


	/* End */
endmodule


//同一循环的不同实现方式
module loop1
 



















